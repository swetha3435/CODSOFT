# -*- coding: utf-8 -*-
"""TASK-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WAztBzaqciG330q9tIRyqBC7u9hNt_Jl

CODSOFT(INTERN)

TASK-3

QUIZ GAME

Develop a quiz game that asks users multiple-choice or fill-in-the-blank questions on a specific topic. The game
should keep track of scores, provide feedback on correct/incorrect answers, and offer a variety of questions to make

it challenging and engaging.
Load Quiz Questions.

Display Welcome Message and Rules.

Present Quiz Questions:

Display each question and answer choice.
Prompt the user to select an answer.
Evaluate the User's Answer:

Compare the user's answer with the correct answer.

Keep track of the user's score.
Provide Feedback:
Display if the answer was correct or incorrect.
Show the correct answer for incorrect responses.

Calculate the Final Score.
Display Final Results:

Print the user's score and performance message.

Play Again:

Ask the user if they want to play again.
"""

import random

class QuizGame:
    def __init__(self, questions):
        self.questions = questions
        self.score = 0

    def display_welcome_message(self):
        print("Welcome to the Quiz Game!")
        print("You will be presented with multiple-choice and fill-in-the-blank questions.")
        print("Try to answer as many questions correctly as you can!")

    def present_quiz_questions(self):
        for question in self.questions:
            print("\nQuestion:", question["question"])

            if "choices" in question:
                # Multiple-choice question
                for i, choice in enumerate(question["choices"], start=1):
                    print(f"{i}. {choice}")

                user_answer = input("Enter the number of your answer: ")
                correct_answer = str(question["answer"])
            else:
                # Fill-in-the-blank question
                user_answer = input("Your answer: ").strip().lower()
                correct_answer = str(question["answer"]).lower()

            self.evaluate_answer(user_answer, correct_answer)

    def evaluate_answer(self, user_answer, correct_answer):
        if user_answer == correct_answer:
            print("Correct!")
            self.score += 1
        else:
            print("Incorrect. The correct answer is:", correct_answer)

    def display_final_results(self):
        print("\nQuiz completed!")
        print(f"Your final score is: {self.score}/{len(self.questions)}")

        if self.score == len(self.questions):
            print("Congratulations! You got all the questions right.")
        elif self.score >= len(self.questions) // 2:
            print("Well done! You did a good job.")
        else:
            print("Keep practicing. You'll get better!")

    def play_again(self):
        return input("\nDo you want to play again? (yes/no): ").lower() == "yes"

def main():
    # Example questions (feel free to replace with your own)
    quiz_questions = [
        {"question": "What is the capital of France?", "answer": "Paris"},
        {"question": "Which planet is known as the Red Planet?", "answer": "Mars"},
        {"question": "What is the largest mammal in the world?", "answer": "Blue Whale"},
    ]

    while True:
        quiz = QuizGame(quiz_questions)
        quiz.display_welcome_message()
        quiz.present_quiz_questions()
        quiz.display_final_results()

        play_again = quiz.play_again()
        if not play_again:
            print("Thanks for playing. Goodbye!")
            break

if __name__ == "__main__":
    main()